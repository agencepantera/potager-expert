---
import type { BlogPost } from '../types';
import { formatDate } from '../utils/dateFormatter';
import OptimizedImage from './OptimizedImage.astro';
import ReadingMetrics from './ReadingMetrics.astro';

interface Props {
  currentPost: BlogPost;
  allPosts: BlogPost[];
}

const { currentPost, allPosts } = Astro.props;

// Filtrer les articles recommandés
const recommendedPosts = allPosts
  .filter(post => post.slug !== currentPost.slug)
  .filter(post => post.category === currentPost.category)
  .slice(0, 3);

// Fonction pour générer les chemins des images optimisées
function getOptimizedImagePaths(imagePath: string) {
  const imageBaseName = imagePath?.split('/')?.pop()?.split('.')?.[0] ?? '';
  const imageExt = imagePath?.split('.')?.pop() ?? '';
  return {
    mobile: `/images/optimized/${imageBaseName}-mobile.${imageExt}`,
    tablet: `/images/optimized/${imageBaseName}-tablet.${imageExt}`,
    desktop: `/images/optimized/${imageBaseName}-desktop.${imageExt}`,
  };
}

---

{recommendedPosts.length > 0 && (
  <section class="py-12 bg-soil-50 dark:bg-soil-900/50">
    <div class="container mx-auto px-4">
      <h2 class="text-3xl font-display font-bold text-center mb-8">Articles recommandés</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {recommendedPosts.map(post => (
          <a 
            href={`/blog/${post.slug}`} 
            class="group bg-white dark:bg-soil-800 rounded-xl overflow-hidden shadow-md hover:shadow-xl transition-shadow duration-300"
          >
            <div class="relative h-48">
              <OptimizedImage
                src={post.image}
                alt={post.title}
                width={800}
                height={400}
                class="absolute inset-0 w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
              <div class="absolute bottom-0 left-0 right-0 p-4">
                <span class="inline-block px-3 py-1 bg-leaf-500/90 backdrop-blur-sm text-white text-sm rounded-full mb-2">
                  {post.category}
                </span>
                <h3 class="text-lg font-medium text-white line-clamp-2">
                  {post.title}
                </h3>
              </div>
            </div>
            <div class="p-4">
              <p class="text-gray-600 dark:text-gray-300 line-clamp-2">
                {post.excerpt}
              </p>
              <div class="mt-4 flex flex-wrap items-center gap-2 sm:gap-4 text-sm text-gray-500 dark:text-gray-400">
                <span>{post.author}</span>
                <span class="hidden sm:inline">•</span>
                <time datetime={post.date}>
                  {formatDate(post.date)}
                </time>
                {post.readingTime && (
                  <>
                    <span class="hidden sm:inline">•</span>
                    <ReadingMetrics time={post.readingTime} />
                  </>
                )}
              </div>
            </div>
          </a>
        ))}
      </div>
    </div>
  </section>
)}
